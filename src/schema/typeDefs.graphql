type Query {
	test(name: String): String
	viewStudents: [Student]
	viewFaculties: [Faculty]
	viewCourses(facultyId: String): [Course]
	viewRecords(csv: Boolean): RecordResponse
}

type Mutation {
	adminLogin(username: String!, password: String!): AdminAuthResponse!

	facultyLogin(username: String!, password: String!): AuthResponse!

	addFaculty(
		username: String!
		password: String!
		name: String!
		adminId: String!
	): AuthResponse!

	addStudent(
		registerno: String!
		name: String!
		dob: String!
		year: Int!
		section: String!
		adminId: String!
	): AddResponse!

	addCourse(
		coursename: String!
		coursecode: String!
		regulation: Int!
		facultyId: String!
		studentsId: [String!]
		adminId: String!
	): AddResponse!

	addRecord(
		courseId: String!
		facultyId: String!
		studentId: String!
		points: Int!
		date: String!
	): AddResponse!

	deleteFaculty(facultyId: String!, adminId: String!): AddResponse!

	deleteStudent(studentId: String!, adminId: String!): AddResponse!

	deleteCourse(courseId: String!, adminId: String!): AddResponse!
}

type Record {
	student: Student!
	faculty: Faculty!
	course: Course!
	points: Int!
	date: String!
}

type RecordResponse {
	record: [Record]
	csv: String
}

type Student {
	id: String!
	registerno: String!
	name: String!
	dob: String!
	year: Int!
	section: String!
}

type Faculty {
	id: String!
	username: String!
	name: String!
}

type Course {
	id: String!
	coursename: String!
	coursecode: String!
	regulation: Int!
	faculty: Faculty!
	students: [Student]
}

type AddResponse {
	id: String
	errors: [Error!]
}

type AdminAuthResponse {
	id: String
	errors: [Error!]
}

type AuthResponse {
	id: String
	name: String
	username: String
	errors: [Error!]
}

type Error {
	path: String
	errorCode: String
	message: String
}
